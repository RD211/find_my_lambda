//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /run/media/rd211/SHARED/find_my_lambda/LanguageEvaluators/C#/CSRunner/CSRunner/Parser/Antlr/Lambda.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class LambdaLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, STRING=9, 
		CHAR=10, INTEGER=11, REAL=12, WS=13;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "STRING", 
		"CHAR", "ESC", "UNICODE", "HEX", "SAFECODEPOINT", "INTEGER", "REAL", "INT", 
		"WS"
	};


	public LambdaLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public LambdaLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "','", "')'", "'['", "']'", "'true'", "'false'", "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "STRING", "CHAR", 
		"INTEGER", "REAL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Lambda.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LambdaLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,13,129,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
		1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,
		8,1,8,1,8,5,8,67,8,8,10,8,12,8,70,9,8,1,8,1,8,1,9,1,9,1,9,5,9,77,8,9,10,
		9,12,9,80,9,9,1,9,1,9,1,10,1,10,1,10,3,10,87,8,10,1,11,1,11,1,11,1,11,
		1,11,1,11,1,12,1,12,1,13,1,13,1,14,3,14,100,8,14,1,14,1,14,1,15,1,15,1,
		15,4,15,107,8,15,11,15,12,15,108,3,15,111,8,15,1,16,1,16,1,16,5,16,116,
		8,16,10,16,12,16,119,9,16,3,16,121,8,16,1,17,4,17,124,8,17,11,17,12,17,
		125,1,17,1,17,0,0,18,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
		0,23,0,25,0,27,0,29,11,31,12,33,0,35,13,1,0,6,8,0,34,34,47,47,92,92,98,
		98,102,102,110,110,114,114,116,116,3,0,48,57,65,70,97,102,3,0,0,31,34,
		34,92,92,1,0,48,57,1,0,49,57,3,0,9,10,13,13,32,32,134,0,1,1,0,0,0,0,3,
		1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
		0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,35,
		1,0,0,0,1,37,1,0,0,0,3,39,1,0,0,0,5,41,1,0,0,0,7,43,1,0,0,0,9,45,1,0,0,
		0,11,47,1,0,0,0,13,52,1,0,0,0,15,58,1,0,0,0,17,63,1,0,0,0,19,73,1,0,0,
		0,21,83,1,0,0,0,23,88,1,0,0,0,25,94,1,0,0,0,27,96,1,0,0,0,29,99,1,0,0,
		0,31,103,1,0,0,0,33,120,1,0,0,0,35,123,1,0,0,0,37,38,5,40,0,0,38,2,1,0,
		0,0,39,40,5,44,0,0,40,4,1,0,0,0,41,42,5,41,0,0,42,6,1,0,0,0,43,44,5,91,
		0,0,44,8,1,0,0,0,45,46,5,93,0,0,46,10,1,0,0,0,47,48,5,116,0,0,48,49,5,
		114,0,0,49,50,5,117,0,0,50,51,5,101,0,0,51,12,1,0,0,0,52,53,5,102,0,0,
		53,54,5,97,0,0,54,55,5,108,0,0,55,56,5,115,0,0,56,57,5,101,0,0,57,14,1,
		0,0,0,58,59,5,110,0,0,59,60,5,117,0,0,60,61,5,108,0,0,61,62,5,108,0,0,
		62,16,1,0,0,0,63,68,5,34,0,0,64,67,3,21,10,0,65,67,3,27,13,0,66,64,1,0,
		0,0,66,65,1,0,0,0,67,70,1,0,0,0,68,66,1,0,0,0,68,69,1,0,0,0,69,71,1,0,
		0,0,70,68,1,0,0,0,71,72,5,34,0,0,72,18,1,0,0,0,73,78,5,39,0,0,74,77,3,
		21,10,0,75,77,3,27,13,0,76,74,1,0,0,0,76,75,1,0,0,0,77,80,1,0,0,0,78,76,
		1,0,0,0,78,79,1,0,0,0,79,81,1,0,0,0,80,78,1,0,0,0,81,82,5,39,0,0,82,20,
		1,0,0,0,83,86,5,92,0,0,84,87,7,0,0,0,85,87,3,23,11,0,86,84,1,0,0,0,86,
		85,1,0,0,0,87,22,1,0,0,0,88,89,5,117,0,0,89,90,3,25,12,0,90,91,3,25,12,
		0,91,92,3,25,12,0,92,93,3,25,12,0,93,24,1,0,0,0,94,95,7,1,0,0,95,26,1,
		0,0,0,96,97,8,2,0,0,97,28,1,0,0,0,98,100,5,45,0,0,99,98,1,0,0,0,99,100,
		1,0,0,0,100,101,1,0,0,0,101,102,3,33,16,0,102,30,1,0,0,0,103,110,3,29,
		14,0,104,106,5,46,0,0,105,107,7,3,0,0,106,105,1,0,0,0,107,108,1,0,0,0,
		108,106,1,0,0,0,108,109,1,0,0,0,109,111,1,0,0,0,110,104,1,0,0,0,110,111,
		1,0,0,0,111,32,1,0,0,0,112,121,5,48,0,0,113,117,7,4,0,0,114,116,7,3,0,
		0,115,114,1,0,0,0,116,119,1,0,0,0,117,115,1,0,0,0,117,118,1,0,0,0,118,
		121,1,0,0,0,119,117,1,0,0,0,120,112,1,0,0,0,120,113,1,0,0,0,121,34,1,0,
		0,0,122,124,7,5,0,0,123,122,1,0,0,0,124,125,1,0,0,0,125,123,1,0,0,0,125,
		126,1,0,0,0,126,127,1,0,0,0,127,128,6,17,0,0,128,36,1,0,0,0,12,0,66,68,
		76,78,86,99,108,110,117,120,125,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
